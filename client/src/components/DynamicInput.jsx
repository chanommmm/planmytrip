import React, { useState, useEffect } from 'react';
import './DynamicInput.css';
import AutocompleteInput from "./AutocompleteInput";

function DynamicInput({ onDataChange }) {
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Input ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î
    const [inputs, setInputs] = useState([
        { text: '', number: '' },
        { text: '', number: '' }
    ]);

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏≤‡∏á (Checkbox)
    const [avoidTolls, setAvoidTolls] = useState(false);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà `App.jsx`
    useEffect(() => {
        console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ô DynamicInput:", inputs);
        onDataChange({ inputs, avoidTolls });
    }, [JSON.stringify(inputs), avoidTolls, onDataChange]); // ‡πÉ‡∏ä‡πâ `JSON.stringify` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£ re-render ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô

    

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å `AutocompleteInput`
    const handlePlaceSelect = (index, locationData) => {
        console.log(`üöÄ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (Index: ${index}):`, locationData);
    
        if (locationData) {
            setInputs(prevInputs => {
                const newInputs = [...prevInputs];
                newInputs[index] = { 
                    text: locationData.text, 
                    lat: locationData.lat,  // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î
                    lng: locationData.lng,   // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î
                    placeId: locationData.placeId, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° `placeId` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ Backend
                    number: newInputs[index].number || "0" // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤
                };
                return newInputs;
            });
        } else {
            console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (Index: ${index})`);
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏à‡∏∏‡∏î)
    const addInputSet = () => {
        if (inputs.length < 5) {
            setInputs([...inputs, { text: '', number: '' }]);
        } else {
            alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Input ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 Set');
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞
    const removeInputSet = (index) => {
        setInputs(prevInputs => prevInputs.filter((_, i) => i !== index));
    };

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ A, B, C, D, E ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    const generateLabel = (index) => {
        return String.fromCharCode(65 + index);
    };

    return (
        <div className="container-input">
            {inputs.map((input, index) => (
                <div className="input-set" key={index}>
                    {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (A, B, C, D, E) */}
                    <div className="label-container" data-label={generateLabel(index)}>
                        <span className="label">{generateLabel(index)}</span>
                    </div>

                    {/* AutocompleteInput ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà */}
                    <AutocompleteInput key={index} index={index} onSelect={(idx, place) => handlePlaceSelect(idx, place)} />

                    {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ */}
                    <select
                        value={input.number}
                        onChange={(e) =>
                            setInputs(prevInputs => {
                                const newInputs = [...prevInputs];
                                newInputs[index].number = e.target.value;
                                return newInputs;
                            })
                        }
                    >
                        <option value="">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</option>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                    </select>

                    {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞ */}
                    {inputs.length > 2 && (
                        <button className="remove-button" onClick={() => removeInputSet(index)}>
                            <i className="bi bi-x-lg"></i>
                        </button>
                    )}
                </div>
            ))}

            <div className="options-container">
                {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞ */}
                <button
                    className="add-button"
                    onClick={addInputSet}
                    disabled={inputs.length >= 5}
                >
                    + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞
                </button>

                {/* Checkbox ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏≤‡∏á */}
                <div className='checkbox-container'>
                    <input
                        type="checkbox"
                        id="avoid-tolls"
                        className="checkbox"
                        checked={avoidTolls}
                        onChange={(e) => setAvoidTolls(e.target.checked)}
                    />
                    <label htmlFor="avoid-tolls" className="checkbox-label">
                        ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏≤‡∏á
                    </label>
                </div>
            </div>
        </div>
    );
}

export default DynamicInput;
