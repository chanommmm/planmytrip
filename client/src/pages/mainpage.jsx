// src/pages/Mainpage.jsx
import { useState, useEffect } from 'react';
import './mainpage.css';
import { HeaderInput } from '../components/Header';
import DynamicInput from '../components/DynamicInput';
import DatePicker, { registerLocale } from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { th } from "date-fns/locale";
import Result from '../components/Result';
import Footer from '../components/Footer';
import moment from 'moment-timezone';

registerLocale("th", th);

export default function Mainpage({ sendData }) {
  const [transport, setTransport] = useState("");
  const [date, setDate] = useState(null);

  const [time, setTime] = useState("");
  const [inputData, setInputData] = useState({ inputs: [], avoidTolls: false });

  useEffect(() => {
    console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Input ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:", inputData);
  }, [inputData]);

  const handleSubmit = async () => {
    if (!transport || !date || !time || inputData.inputs.length === 0) {
      return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô!");
    }

    // ‡πÅ‡∏¢‡∏Å hour/minute ‡∏à‡∏≤‡∏Å time picker ("13.30" ‚Üí 13, 30)
    const [hour, minute] = time.split('.').map(n => parseInt(n, 10));

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á moment-timezone ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ date ‡πÅ‡∏•‡∏∞ time
    const visitDateTime = moment(date)
      .tz('Asia/Bangkok')
      .hour(hour)
      .minute(minute)
      .second(0);

    // ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏õ‡πá‡∏ô "YYYY-MM-DD HH:mm:ss"
    const thaiDateTime = visitDateTime.format('YYYY-MM-DD HH:mm:ss');
    console.log("üïí visitDateTime (Asia/Bangkok):", thaiDateTime);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏™‡πà‡∏á‡πÑ‡∏õ backend
    const requestData = {
      transport,
      date: thaiDateTime,
      time,
      locations: inputData.inputs.map(input => ({
        text: input.text,
        lat: input.lat,
        lng: input.lng,
        number: input.number,
        placeId: input.placeId,
        name: input.name,
      })),
      avoidTolls: inputData.avoidTolls,
    };

    console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ Backend:", requestData);

    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
      const response = await sendData(requestData);
      console.log("RESPONSE FROM BACKEND:", response);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: ‡∏≠‡∏≤‡∏à‡πÑ‡∏î‡πâ response.routes ‡∏´‡∏£‡∏∑‡∏≠ response.data.locations
      const enriched = Array.isArray(response.routes)
        ? response.routes
        : Array.isArray(response.data?.locations)
          ? response.data.locations
          : [];

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏≠‡∏≤‡πÄ‡∏£‡∏¢‡πå
      const closedPlaces = enriched
        .filter(loc => loc.isOpen === false)
        .map(loc => loc.name);

      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      if (closedPlaces.length > 0) {
        alert(`‚ùå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ${closedPlaces.join(', ')}`);
      } else {
        alert("‚úÖ ‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!");
      }
    } catch (err) {
      console.error("Error sending data:", err);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà!");
    }
  };


  const generateTimeOptions = () => {
    const times = [];
    for (let h = 0; h < 24; h++) {
      for (let m of ['00', '30']) {
        times.push(`${h.toString().padStart(2, '0')}.${m}`);
      }
    }
    return times;
  };



  return (

    <div className="background">
      <HeaderInput />

      <div className="main-content">
        <div className="postimage">
          <img src="/post4.jpg" alt="" />
        </div>

        <div className="overlay-content">
          <div className="Title">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</div>

          <div className="box">
            <div className="category-box">
              <label className="category-botton">
                <input
                  type="radio"
                  name="transport"
                  value="car"
                  onChange={e => setTransport(e.target.value)}
                />
                <i className="bi bi-car-front-fill"></i>
                <span className="type">‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå</span>
              </label>

              <label className="category-botton">
                <input
                  type="radio"
                  name="transport"
                  value="walk"
                  onChange={e => setTransport(e.target.value)}
                />
                <i className="bi bi-person-standing"></i>
                <span className="type">‡πÄ‡∏î‡∏¥‡∏ô</span>
              </label>
            </div>

            <div className="main-box">
              <div className="date-time">

                <label className="date-wrapper">
                  <i className="bi bi-calendar3"></i>
                  <DatePicker
                    selected={date}
                    onChange={d => setDate(d)}
                    locale="th"
                    dateFormat="dd MMMM yyyy"
                    placeholderText="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á"
                    className="date-picker"
                  />
                </label>


                <label className="time-wrapper">
                  <i className="bi bi-clock"></i>
                  <select
                    value={time}
                    onChange={e => setTime(e.target.value)}
                    className={`styled-select no-border ${!time ? 'placeholder' : ''}`}
                  >
                    <option value="" disabled>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</option>
                    {generateTimeOptions().map(t => (
                      <option key={t} value={t}>{t}</option>
                    ))}
                  </select>
                </label>
              </div>

              <div className="location-box">
                <DynamicInput onDataChange={setInputData} />
              </div>

              <div className="submit-box">
                <button className="submit-button" onClick={handleSubmit}>
                  ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className='hiddenpage'>
        <Result /><Result /><Result /><Result />
      </div>

      <Footer />
    </div>

  );


}
