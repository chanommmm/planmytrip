const express = require("express");
const axios = require("axios");
const router = express.Router();

let lastPlanData = null;  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤

// üëâ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î
async function geocodeAddress(address) {
    const apiKey = process.env.GOOGLE_MAPS_API_KEY;

    // üîç Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
    console.log("üìå Address to geocode:", address);
    console.log("üß™ Using API Key:", apiKey ? "(found)" : "(‚ùå NOT FOUND)");
    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;
    console.log("üåê Geocoding Request URL:", url);

    try {
        const res = await axios.get(url);

        // üîç Log ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API
        console.log("üì¶ Geocoding API response:", JSON.stringify(res.data, null, 2));

        if (!res.data.results || res.data.results.length === 0) {
            console.warn("‚ö†Ô∏è No results from Geocoding API for:", address);
            return null;
        }

        const result = res.data.results[0];
        return {
            address: result.formatted_address,
            lat: result.geometry.location.lat,
            lng: result.geometry.location.lng,
        };
    } catch (error) {
        console.error("‚ùå Geocoding error:", error.response?.data || error.message);
        return null;
    }
}

// ‚úÖ API ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
router.get("/api", (req, res) => {
    res.json({ message: "API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!" });
});

// ‚úÖ API ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
router.post("/api/plan", (req, res) => {
    lastPlanData = req.body;
    res.json({ success: true, routes: req.body.locations });
});

// ‚úÖ API ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î + ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î
router.get("/api/plan", async (req, res) => {
    if (!lastPlanData) {
        return res.status(404).json({ success: false, message: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á" });
    }

    try {
        const enrichedLocations = await Promise.all(
            lastPlanData.locations.map(async (loc) => {
                const geo = await geocodeAddress(loc.text);
                return {
                    ...loc,
                    coordinates: geo,
                };
            })
        );

        const responseData = {
            ...lastPlanData,
            locations: enrichedLocations,
        };

        res.json({ success: true, data: responseData });
    } catch (err) {
        console.error("‚ùå Error during geocoding:", err.message);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" });
    }
});

module.exports = router;
