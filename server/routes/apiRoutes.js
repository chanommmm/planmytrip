const express = require("express");
const axios = require("axios");
const router = express.Router();
const moment = require("moment");

<<<<<<< HEAD

=======
let lastPlanData = null;
>>>>>>> 019bbc9cee79d406bffaad6f89798b2fa6359274

const GOOGLE_API_KEY = process.env.GOOGLE_MAPS_API_KEY;

// ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ placeId
async function getOpeningHours(placeId) {
    try {
        const url = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,opening_hours,formatted_address,place_id&key=${GOOGLE_API_KEY}`;
        const response = await axios.get(url);

        console.log("üì¶ Google API Response for placeId:", placeId, response.data);

        const result = response.data.result;
        console.log("üì¶ Opening hours:", result.opening_hours); // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î
        return {
            name: result.name,
            opening_hours: result.opening_hours || null,
        };
    } catch (error) {
        console.error(`‚ùå Error fetching details for placeId ${placeId}:`, error.message);
        return { opening_hours: null };
    }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
function isPlaceOpen(openingHours, visitDateTime) {
    if (!openingHours || !openingHours.periods) return false;

    const day = visitDateTime.day(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
    const time = visitDateTime.format("HHmm");
    console.log("‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ: ", time); // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ

    // ‡πÄ‡∏ä‡πá‡∏Ñ weekday_text ‡∏ß‡πà‡∏≤‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏°
    const weekdayText = openingHours.weekday_text;
    if (weekdayText) {
        const currentDayText = weekdayText[day];
        if (currentDayText && currentDayText.toLowerCase().includes("closed")) {
            console.log(`‚õî ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô ${visitDateTime.format("dddd")}: ${currentDayText}`);
            return false;
        }
    }

    const todayPeriods = openingHours.periods.filter(p => p.open.day === day);
    if (todayPeriods.length === 0) {
        console.log(`‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô ${visitDateTime.format("dddd")}`);
        return false;
    }

    for (const period of todayPeriods) {
        const openTime = period.open.time;
        const closeTime = period.close?.time || "2359";

        console.log(`‚è∞ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î: ${openTime} ‡∏ñ‡∏∂‡∏á ${closeTime}`); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        if (time >= openTime && time < closeTime) {
            console.log(`‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î: ${visitDateTime.format("dddd, MMMM Do YYYY")}`);
            return true;
        }
    }

    console.log(`‚õî ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô ${visitDateTime.format("dddd")}`);
    return false;
}

// ‚úÖ POST /api/plan
router.post("/api/plan", async (req, res) => {
    const plan = req.body;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì visitDateTime ‡πÇ‡∏î‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
    const visitDateTime = moment(plan.date).utcOffset('+07:00'); // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
    console.log("üïí ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å (‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤):", visitDateTime.format());
    

    const enrichedLocations = await Promise.all(
        plan.locations.map(async (loc) => {
            if (loc.placeId) {
                const details = await getOpeningHours(loc.placeId);
                const openingHours = details.opening_hours;

                if (!openingHours) {
                    console.warn(`${loc.name} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î`);
                    return {
                        ...loc,
                        opening_hours: null,
                        isOpen: false,
                        alert: `${loc.name} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î`,
                    };
                }

                const isOpen = isPlaceOpen(openingHours, visitDateTime);

                if (!isOpen) {
                    return {
                        ...loc,
                        opening_hours: openingHours,
                        isOpen: false,
                        alert: `${loc.name} ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${visitDateTime.format("dddd, MMMM Do YYYY")}`, // ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
                    };
                } else {
                    return {
                        ...loc,
                        opening_hours: openingHours,
                        isOpen: true,
                    };
                }
            } else {
                return {
                    ...loc,
                    isOpen: false,
                    alert: `${loc.name || "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ"} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• placeId`,
                };
            }
        })
    );

    lastPlanData = {
        ...plan,
        locations: enrichedLocations,
    };

    console.log("üìä Plan data:", lastPlanData); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ

    res.json({ success: true, routes: enrichedLocations });
});

<<<<<<< HEAD
// ‚úÖ API ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
router.post("/api/plan", async (req, res) => {
    lastPlanData = req.body; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

    const { locations } = req.body;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    for (let i = 0; i < locations.length; i++) {
        const placeId = locations[i].placeId;
        const openingHours = await checkPlaceHours(placeId);
        locations[i].opening_hours = openingHours; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    res.json({ success: true, routes: locations });
=======
// ‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API
router.get("/api", (req, res) => {
    res.send("API is working.");
>>>>>>> 019bbc9cee79d406bffaad6f89798b2fa6359274
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
router.get("/api/plan", (req, res) => {
    if (!lastPlanData) {
        return res.status(404).json({ success: false, message: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á" });
    }
    res.json({ success: true, data: lastPlanData });
});

module.exports = router;